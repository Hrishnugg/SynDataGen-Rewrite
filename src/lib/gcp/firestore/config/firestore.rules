rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions for rule validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }
    
    function isCustomer(customerId) {
      return isAuthenticated() && request.auth.uid == customerId;
    }
    
    function isTeamMember(projectData) {
      return isAuthenticated() 
        && projectData.teamMembers.hasAny([{
            userId: request.auth.uid
           }]);
    }
    
    function hasRole(projectData, roles) {
      return isAuthenticated() 
        && projectData.teamMembers.hasAny([
           { userId: request.auth.uid, role: roles[0] },
           { userId: request.auth.uid, role: roles[1] },
           { userId: request.auth.uid, role: roles[2] },
           { userId: request.auth.uid, role: roles[3] }
          ]);
    }
    
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Customers collection
    match /customers/{customerId} {
      // Allow customers to read only their own data
      allow get: if isCustomer(customerId) || isAdmin();
      
      // Only admins can create customers
      allow create: if isAdmin();
      
      // Customers can update some of their own fields, admins can update any
      allow update: if isAdmin() || (
        isCustomer(customerId) && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['name', 'settings', 'metadata'])
      );
      
      // Only admins can delete customers
      allow delete: if isAdmin();
      
      // Customer's project subcollection - if we decide to use subcollections
      match /projects/{projectId} {
        allow read: if isCustomer(customerId) || isTeamMember(resource.data) || isAdmin();
        allow create: if isCustomer(customerId) || isAdmin();
        allow update: if isAdmin() || 
          (isCustomer(customerId)) || 
          hasRole(resource.data, ['owner', 'admin']);
        allow delete: if isAdmin() || 
          (isCustomer(customerId)) || 
          hasRole(resource.data, ['owner']);
      }
    }
    
    // Waitlist collection
    match /waitlist/{submissionId} {
      // Anyone can create a waitlist submission
      allow create: if request.resource.data.size() < 20 // limit document size
        && request.resource.data.keys().hasOnly([
           'email', 'name', 'company', 'jobTitle', 'useCase', 
           'dataVolume', 'industry', 'createdAt', 'metadata'
         ]);
      
      // Only admins can read, update or delete waitlist submissions
      allow get, list, update, delete: if isAdmin();
    }
    
    // Projects collection (top-level)
    match /projects/{projectId} {
      allow read: if isAdmin() || 
        isCustomer(resource.data.customerId) || 
        isTeamMember(resource.data);
      
      allow create: if isAdmin() || 
        isCustomer(request.resource.data.customerId);
      
      allow update: if isAdmin() || 
        isCustomer(resource.data.customerId) || 
        hasRole(resource.data, ['owner', 'admin']);
      
      allow delete: if isAdmin() || 
        isCustomer(resource.data.customerId) || 
        hasRole(resource.data, ['owner']);
    }
    
    // Data Generation Jobs collection
    match /dataGenerationJobs/{jobId} {
      allow read: if isAdmin() || 
        isCustomer(resource.data.customerId) || 
        (
          resource.data.projectId != null &&
          get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.teamMembers
            .hasAny([{ userId: request.auth.uid }])
        );
      
      allow create: if isAdmin() || 
        isCustomer(request.resource.data.customerId) ||
        (
          request.resource.data.projectId != null &&
          get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.teamMembers
            .hasAny([
              { userId: request.auth.uid, role: 'owner' },
              { userId: request.auth.uid, role: 'admin' },
              { userId: request.auth.uid, role: 'member' }
            ])
        );
      
      // Only creator or admin can update or delete jobs
      allow update, delete: if isAdmin() || 
        isCustomer(resource.data.customerId) ||
        (
          resource.data.projectId != null &&
          get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.teamMembers
            .hasAny([
              { userId: request.auth.uid, role: 'owner' },
              { userId: request.auth.uid, role: 'admin' }
            ])
        );
    }
  }
} 