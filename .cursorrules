# Project Rules

## Project Information
- **Version**: 1.0.0
- **Last Updated**: March 13, 2025 at 06:37 PM
- **Name**: synoptic
- **Language**: typescript
- **Framework**: react
- **Type**: application

## Project Description
This project aims to provide a generic application framework, primarily focused on code generation and project analysis capabilities. While technical details on error handling, performance optimizations, and code organization are currently unspecified, the project's core purpose lies in its ability to analyze and generate code, potentially serving developers seeking to automate or understand existing codebases.

## AI Behavior Rules

### Code Generation Style
#### Preferred Patterns
- TypeScript for all new code.
- React functional components with hooks.
- Consistent use of single quotes for strings unless template literals are needed.
- Semicolons at the end of statements (though many files are inconsistent about this and the AI should not try to enforce it).
- Object property definitions using ': ' with a space after the colon.
- Avoid unnecessary template literals; use string concatenation when possible.
- Consistent indentation (usually 2 spaces, but match the file).
- Consistent use of blank lines for readability (follow the style of the file being edited).
- Use of `console.log` for debugging and informational messages.
- Use of JSDoc-style comments for documentation.
- Use of Tailwind CSS classes for styling.
- When fixing errors, maintain the original intent of the code as much as possible.
- Prefer explicit types over implicit types, especially for function parameters and return types.
- Use the Next.js framework structure and conventions.
- Use named exports over default exports where possible, but follow existing patterns in each file.

#### Patterns to Avoid
- Inconsistent indentation.
- Mixing single and double quotes.
- Unnecessary complexity.
- Introducing new dependencies without a clear reason.
- Drastic changes to existing code structure.
- Using different naming conventions than existing ones.
- Deviating from the existing level of code quality.
- Introducing significant performance regressions.

### Error Handling
#### Preferred Patterns
- Use `try...catch` blocks for handling potential errors, especially in asynchronous operations.
- Log errors to the console using `console.error`.
- Return or throw errors to propagate them to the caller.
- Handle errors gracefully to prevent application crashes.
- When fixing errors, ensure that the error handling logic is preserved or improved.
- Use specific error types when possible (e.g., `TypeError`, `Error`).

#### Patterns to Avoid
- Ignoring errors.
- Unnecessary `try...catch` blocks.
- Generic error handling that doesn't provide specific information.
- Crashing the application due to unhandled errors.

### Performance
#### Preferred Patterns
- Optimize images using Next.js's `next/image` component.
- Use code splitting to reduce the initial bundle size.
- Memoize React components to prevent unnecessary re-renders.
- Use lazy loading for components and images that are not immediately visible.
- Optimize Firestore queries to minimize data retrieval.
- Use caching strategies to reduce database load.
- Use `useRef` to store values that don't trigger re-renders.
- Avoid computationally expensive operations in the main thread.
- Use web workers for background tasks.
- Consider using stub implementations for non-critical functionality to improve performance (as seen in the 'replace' scripts).

#### Patterns to Avoid
- Unnecessary re-renders.
- Large bundle sizes.
- Blocking the main thread.
- Inefficient database queries.
- Unnecessary computations.

### Module Organization
#### Structure
- The project is organized into several directories including `src`, `public`, `.next`, `dataconnect-generated`, and `ParticleWaves`.
- The `src` directory contains the main application code, including components, pages, lib, features, context, scripts and tests.
- Components are located in `src/components` and are further organized into subdirectories.
- Pages are located in `src/pages` and define the application's routes.
- `src/lib` contains core modules and utility functions.
- `src/features` contains code related to specific features of the application.
- `@types` contain type definition files.

#### Dependencies
- The project uses React, Next.js, TypeScript, Tailwind CSS, and Firebase.
- Modules import dependencies using ES modules syntax (e.g., `import { ... } from '...'`).
- Dependencies are managed using npm or yarn.
- `firebase-admin` is used for server-side Firebase operations.
- `firebase/data-connect` and `@tanstack-query-firebase/react/data-connect` are used for data connectivity.
- `three` is used in `ParticleWaves`.
- `@builder.io/partytown` is used to offload scripts to a web worker.

#### Module Responsibilities
- **src/components**: Reusable UI elements.
- **src/pages**: Defines application routes and page structure.
- **src/lib**: Core modules, utility functions, and API services.
- **src/features**: Specific functionalities of the application (e.g., data generation, customer management).
- **src/context**: Manages application state and provides data to components.
- **src/scripts**: Standalone scripts for tasks like data migration and testing.
- **src/tests**: Unit and integration tests.
- **dataconnect-generated**: Generated code related to data connectivity.

#### Rules
- Separate UI components from business logic.
- Group related code into modules.
- Use descriptive names for files and directories.
- Follow the Next.js framework structure.
- Use environment variables for configuration.
- Use stub implementations when necessary to allow compilation, especially during development or when parts of the system aren't yet implemented.

#### Naming Conventions
- **files**: Use kebab-case for file names (e.g., `firestore-service.ts`).
- **components**: Use PascalCase for component names (e.g., `FirestoreService`).
- **variables**: Use camelCase for variable names (e.g., `firestoreService`).
- **interfaces**: Use PascalCase for interface names (e.g., `JobConfiguration`).
- **functions**: Use camelCase for function names (e.g., `getFirestoreService`).
- **constants**: Use UPPER_SNAKE_CASE for constant names (e.g., `FIREBASE_PROJECT_ID`).
