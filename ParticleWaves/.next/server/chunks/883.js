"use strict";exports.id=883,exports.ids=[883],exports.modules={1883:(e,t,o)=>{o.a(e,async(e,a)=>{try{o.r(t),o.d(t,{default:()=>d});var i=o(997),n=o(6689),r=o(2949),s=o(2331),l=o(6757),c=o(9393),m=e([r,s,l,c]);[r,s,l,c]=m.then?(await m)():m;let d=()=>{let e=(0,n.useRef)(null),t=(0,n.useRef)(new r.Vector3(999,999,0)),o=(t,o,a,i,n,r,s)=>{console.log("--- POSITION DEBUGGING ---"),console.log("Viewport Dimensions:",{clientWidth:e.current?.clientWidth,clientHeight:e.current?.clientHeight,aspect:o.aspect,visibleWidthAtZDepth:n,visibleHeightAtZDepth:r,calculatedWidth:s}),console.log("Camera Settings:",{position:o.position.toArray(),fov:o.fov,near:o.near,far:o.far});let l=1/0,c=-1/0,m=1/0,d=-1/0,h=1/0,u=-1/0;if(a.forEach((e,t)=>{let o=e.geometry.attributes.position.array;for(let e=0;e<o.length;e+=3)l=Math.min(l,o[e]),c=Math.max(c,o[e]),m=Math.min(m,o[e+1]),d=Math.max(d,o[e+1]),h=Math.min(h,o[e+2]),u=Math.max(u,o[e+2]);console.log(`Wave ${t} Position Range:`,{x:[l,c],y:[m,d],z:[h,u]})}),console.log("Overall Wave Particles Range:",{x:[l,c],y:[m,d],z:[h,u]}),i&&i.geometry){let e=i.geometry.attributes.position.array,t=1/0,o=-1/0,a=1/0,n=-1/0,r=1/0,s=-1/0;for(let i=0;i<e.length;i+=3)t=Math.min(t,e[i]),o=Math.max(o,e[i]),a=Math.min(a,e[i+1]),n=Math.max(n,e[i+1]),r=Math.min(r,e[i+2]),s=Math.max(s,e[i+2]);console.log("Background Particles Range:",{x:[t,o],y:[a,n],z:[r,s]})}console.log("Scene Hierarchy:",{scenePosition:t.position.toArray(),sceneRotation:t.rotation.toArray(),sceneScale:t.scale.toArray(),childCount:t.children.length}),t.children.forEach((e,t)=>{"Object3D"===e.type&&console.log(`Scene Container ${t}:`,{position:e.position.toArray(),rotation:e.rotation.toArray(),scale:e.scale.toArray(),childCount:e.children.length})})};return(0,n.useEffect)(()=>{let a;if(!e.current)return;let i=e.current.clientWidth,n=e.current.clientHeight;if(0===i||0===n){console.warn("Container has zero width or height. Delaying initialization.");let t=new ResizeObserver(o=>{let{width:a,height:i}=o[0].contentRect;a>0&&i>0&&(t.disconnect(),e.current.dataset.ready="true")});t.observe(e.current);return}console.log("Initializing with container dimensions:",{width:i,height:n});let m=new r.Scene;m.background=new r.Color(17);let d=new r.PerspectiveCamera(60,i/n,.1,1e3),h=i/n,u=h>1;d.position.set(0,0,80),d.lookAt(0,0,0),console.log("Camera position corrected:",{position:d.position.toArray(),lookAt:[0,0,0]});let M=new r.Object3D;M.position.set(0,0,0),m.add(M);let g=new r.GridHelper(100,10,4473924,2236962);g.position.set(0,0,0),g.visible=!1,m.add(g);let p=d.fov*Math.PI/180,f=2*Math.tan(p/2)*80,w=f*d.aspect*1;console.log("Calculated visible dimensions:",{visibleWidthAtZDepth:w,visibleHeightAtZDepth:f,aspectRatio:h,isLandscape:u,viewportCorrectionFactor:1}),M.position.set(0,0,0),console.log("Corrected scene container position:",{globalCenterOffsetX:0,sceneContainerPosition:M.position.toArray()});let v=(u?f:w)*1;console.log("Viewport correction factors:",{viewportCorrectionFactor:1,baseSize:v});let y=new r.WebGLRenderer({antialias:!0,alpha:!0}),b=Math.min(window.devicePixelRatio,2);y.setPixelRatio(b),y.autoClear=!0,y.setClearColor(17,1),y.setSize(i,n,!1),y.domElement.style.position="absolute",y.domElement.style.left="0",y.domElement.style.top="0",y.domElement.style.width="100%",y.domElement.style.height="100%",e.current.appendChild(y.domElement);let x=new s.EffectComposer(y);x.setPixelRatio(b),x.setSize(i,n);let C=new l.RenderPass(m,d);x.addPass(C);let P=new c.UnrealBloomPass(new r.Vector2(i,n),.8,.3,.8);if(x.addPass(P),0===y.domElement.width||0===y.domElement.height){console.warn("Canvas has zero dimensions, cannot initialize composer");return}let A=u?.65:.75;console.log("Wave scale factor:",A);let S=.85*w;console.log("Wave width calculation:",{screenWidthFactor:.85,calculatedWidth:S,visibleWidthAtZDepth:w});let E=new r.Object3D;E.position.set(0,0,0),M.add(E);let D=new r.Mesh(new r.SphereGeometry(.5,8,8),new r.MeshBasicMaterial({color:16711680}));D.visible=!1,E.add(D),(()=>{let e=new r.SphereGeometry(.5,8,8),t=new r.Mesh(e,new r.MeshBasicMaterial({color:16711680}));t.position.set(-w/2,0,0),t.name="leftMarker",t.visible=!1,m.add(t);let o=new r.Mesh(e,new r.MeshBasicMaterial({color:65280}));o.position.set(w/2,0,0),o.name="rightMarker",o.visible=!1,m.add(o);let a=new r.Mesh(e,new r.MeshBasicMaterial({color:255}));a.position.set(0,0,0),a.name="originMarker",a.visible=!1,m.add(a);let i=new r.LineBasicMaterial({color:16776960}),n=[];n.push(new r.Vector3(-w/2,0,0)),n.push(new r.Vector3(w/2,0,0));let s=new r.BufferGeometry().setFromPoints(n),l=new r.Line(s,i);l.name="centerLine",l.visible=!1,m.add(l),console.log("Viewport boundary markers added:",{leftEdge:-w/2,rightEdge:w/2,center:0,visibleWidthAtZDepth:w})})();let z=(e,t,o)=>{if(!e||!e.geometry)return!1;let a=e.geometry.attributes.position.array,i=!1,n=.48*t,r=.48*o;for(let e=0;e<a.length;e+=3)Math.abs(a[e])>n&&(a[e]=Math.sign(a[e])*(n-2-3*Math.random()),i=!0),Math.abs(a[e+1])>r&&(a[e+1]=Math.sign(a[e+1])*(r-2-3*Math.random()),i=!0),Math.abs(a[e+2])>40&&(a[e+2]=Math.sign(a[e+2])*(38-3*Math.random()),i=!0);return i&&(e.geometry.attributes.position.needsUpdate=!0),i};new r.Color(16777215),new r.Color(10934527),new r.Color(5084415),new r.Color(18347),new r.Color(16738740),new r.Color(16716947),new r.Color(16711935);let F=new r.Color(16711935),R=new r.Color(15790335),B=new r.Color(18347),k=(e,t,o)=>{let a=new r.Color;return a.r=e.r+(t.r-e.r)*o,a.g=e.g+(t.g-e.g)*o,a.b=e.b+(t.b-e.b)*o,a},L=[],V={minX:1/0,maxX:-1/0,minY:1/0,maxY:-1/0,minZ:1/0,maxZ:-1/0};for(let e=0;e<5;e++){let t=new r.BufferGeometry,o=new Float32Array(12e3),a=new Float32Array(12e3),i=new Float32Array(12e3),n=new Float32Array(4e3),s=5+2.5*e,l=Math.sqrt(16800),c=e%3;console.log(`Creating Wave ${e}:`,{waveHeight:s,waveType:c,gridWidth:l,particleCount:4e3});for(let t=0;t<4e3;t++){let r;let s=t%l/l*2-1;s=Math.sign(s)*Math.pow(Math.abs(s),1.15);let c=w/2*s*1,m=Math.random()*Math.PI*2,d=Math.pow(Math.abs(s),2),h=(u?.65:.55)*(1-.3*d),M=2*Math.pow(Math.random(),3)*h+.3*e,g=Math.sin(m)*M,p=Math.cos(m)*M,f=0+g;o[3*t]=c,o[3*t+1]=f,o[3*t+2]=p,V.minX=Math.min(V.minX,c),V.maxX=Math.max(V.maxX,c),V.minY=Math.min(V.minY,f),V.maxY=Math.max(V.maxY,f),V.minZ=Math.min(V.minZ,p),V.maxZ=Math.max(V.maxZ,p),t%1e3==0&&console.log(`Wave ${e} Particle ${t} Position:`,{screenPosition:s,calculatedWidth:S,scaleFactor:1,x:c,y:f,z:p,radiusMultiplier:h,distance:M}),i[3*t]=c,i[3*t+1]=f,i[3*t+2]=p;let v=(c/(S/2)+1)/2;if(v<.45){let e=v/.45,t=Math.pow(e,1);if(r=k(F,R,t),.3>Math.random()){let e=.12*Math.random();r.offsetHSL(0,0,e-.06)}}else if(v>.55){let e=(v-.55)/.45,t=Math.pow(e,1);if(r=k(R,B,t),.3>Math.random()){let e=.12*Math.random();r.offsetHSL(0,0,e-.06)}}else{let e=(v-.45)/.1;if(r=k(R,R,e),.5>Math.random()){let e=.15*Math.random();v<.5?r.offsetHSL(-.05,.1,e-.08):r.offsetHSL(.05,.1,e-.08)}}a[3*t]=r.r,a[3*t+1]=r.g,a[3*t+2]=r.b,n[t]=.4+.7*Math.random()}console.log(`Wave ${e} Position Summary:`,{xRange:[V.minX,V.maxX],yRange:[V.minY,V.maxY],zRange:[V.minZ,V.maxZ],visibleWidthAtZDepth:w,calculatedWidth:S}),t.setAttribute("position",new r.BufferAttribute(o,3)),t.setAttribute("customColor",new r.BufferAttribute(a,3)),t.setAttribute("size",new r.BufferAttribute(n,1));let m=new r.ShaderMaterial({uniforms:{pointTexture:{value:W()}},vertexShader:`
          attribute float size;
          attribute vec3 customColor;
          varying vec3 vColor;
          
          void main() {
            vColor = customColor;
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = size * (300.0 / -mvPosition.z);
            gl_Position = projectionMatrix * mvPosition;
          }
        `,fragmentShader:`
          uniform sampler2D pointTexture;
          varying vec3 vColor;
          
          void main() {
            gl_FragColor = vec4(vColor, 1.0) * texture2D(pointTexture, gl_PointCoord);
            if (gl_FragColor.a < 0.1) discard;
          }
        `,blending:r.AdditiveBlending,depthTest:!1,transparent:!0,vertexColors:!0}),d=new r.Points(t,m);d.userData={originalPositions:i,waveOffset:0,waveHeight:s,baseWaveHeight:s,minWaveHeight:.6*s,speed:.5+.5*Math.random(),frequency:.02+.02*Math.random(),baseFrequency:.02+.02*Math.random(),minFrequency:.015,amplitudeFluctuation:.2+.6*Math.random(),frequencyFluctuation:.3+.3*Math.random(),fluctuationSpeed:.15+.25*Math.random(),timeOffset:Math.random()*Math.PI*2,waveType:c,initialDistances:new Float32Array(4e3),initialAngles:new Float32Array(4e3)};for(let t=0;t<4e3;t++){let o=Math.random()*Math.PI*2,a=1.6*Math.pow(Math.random(),3)+.25*e;d.userData.initialDistances[t]=a,d.userData.initialAngles[t]=o}E.add(d),L.push(d)}console.log("All Wave Particles Position Range:",V),console.log("Comparison to viewport:",{xRangeVsVisibleWidth:[V.minX/(w/2),V.maxX/(w/2)],yRangeVsVisibleHeight:[V.minY/(f/2),V.maxY/(f/2)]}),console.log("Applying initial constraints to wave particles..."),L.forEach((e,t)=>{let o=z(e,w,f);console.log(`Wave ${t} initial constraint applied: ${o}`)}),E.position.set(0,0,0);{let e=new r.BufferGeometry,t=new Float32Array(9e3),o=new Float32Array(9e3),i=new Float32Array(3e3),n={minX:1/0,maxX:-1/0,minY:1/0,maxY:-1/0,minZ:1/0,maxZ:-1/0};console.log("Creating background particles:",{count:3e3,visibleWidthAtZDepth:w,visibleHeightAtZDepth:f});for(let e=0;e<3e3;e++){let a;let r=u?.9:.8,s=2*Math.random()-1;.15>Math.random()&&(s=(.5>Math.random()?-1:1)*(.85+.15*Math.random()));let l=w/2*s*r*1,c=f/2*(2*Math.random()-1)*r,m=(2*Math.random()-1)*35;t[3*e]=l,t[3*e+1]=c,t[3*e+2]=m,n.minX=Math.min(n.minX,l),n.maxX=Math.max(n.maxX,l),n.minY=Math.min(n.minY,c),n.maxY=Math.max(n.maxY,c),n.minZ=Math.min(n.minZ,m),n.maxZ=Math.max(n.maxZ,m),e%1e3==0&&console.log(`Background Particle ${e} Position:`,{x:l,y:c,z:m,spreadFactor:r,bgScaleFactor:1,calculatedWidth:S,visibleHeightAtZDepth:f}),i[e]=.05>Math.random()?.8+1.2*Math.random():.1+.4*Math.random();let d=(l/(S/2*r)+1)/2;if(d<.45){let e=d/.45,t=Math.pow(e,1.1);if(a=k(F,R,t),.3>Math.random()){let e=.15*Math.random();a.offsetHSL(0,0,e-.07)}}else if(d>.55){let e=(d-.55)/.45,t=Math.pow(e,1.1);if(a=k(R,B,t),.3>Math.random()){let e=.15*Math.random();a.offsetHSL(0,0,e-.07)}}else{let e=(d-.45)/.1;if(a=k(R,R,e),.5>Math.random()){let e=.15*Math.random();d<.5?a.offsetHSL(-.05,.1,e-.08):a.offsetHSL(.05,.1,e-.08)}}.1>Math.random()&&(.5>Math.random()?a.offsetHSL(0,0,.1):a.offsetHSL(0,0,-.15)),o[3*e]=a.r,o[3*e+1]=a.g,o[3*e+2]=a.b}console.log("Background Particles Position Summary:",n),console.log("Background vs Viewport Comparison:",{xRangeVsVisibleWidth:[n.minX/(w/2),n.maxX/(w/2)],yRangeVsVisibleHeight:[n.minY/(f/2),n.maxY/(f/2)]}),e.setAttribute("position",new r.BufferAttribute(t,3)),e.setAttribute("customColor",new r.BufferAttribute(o,3)),e.setAttribute("size",new r.BufferAttribute(i,1));let s=new r.ShaderMaterial({uniforms:{pointTexture:{value:W()}},vertexShader:`
          attribute float size;
          attribute vec3 customColor;
          varying vec3 vColor;
          
          void main() {
            vColor = customColor;
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = size * (300.0 / -mvPosition.z);
            gl_Position = projectionMatrix * mvPosition;
          }
        `,fragmentShader:`
          uniform sampler2D pointTexture;
          varying vec3 vColor;
          
          void main() {
            gl_FragColor = vec4(vColor, 1.0) * texture2D(pointTexture, gl_PointCoord);
            if (gl_FragColor.a < 0.1) discard;
          }
        `,blending:r.AdditiveBlending,depthTest:!1,transparent:!0,vertexColors:!0});a=new r.Points(e,s),m.add(a)}if(console.log("Applying initial constraints to background particles..."),a){let e=z(a,1.2*w,1.2*f);console.log(`Background particles initial constraint applied: ${e}`)}function W(){let e=document.createElement("canvas");e.width=64,e.height=64;let t=e.getContext("2d");if(!t)return console.error("Could not get 2D context for particle texture"),new r.Texture;let o=t.createRadialGradient(32,32,0,32,32,32);o.addColorStop(0,"rgba(255, 255, 255, 1)"),o.addColorStop(.1,"rgba(255, 255, 255, 0.95)"),o.addColorStop(.25,"rgba(240, 250, 255, 0.9)"),o.addColorStop(.5,"rgba(200, 230, 255, 0.6)"),o.addColorStop(.75,"rgba(150, 200, 255, 0.3)"),o.addColorStop(1,"rgba(100, 150, 255, 0)"),t.fillStyle=o,t.fillRect(0,0,64,64);let a=new r.Texture(e);return a.needsUpdate=!0,a}let H=new r.Raycaster,X=new r.Vector2,T=new r.Plane(new r.Vector3(0,0,1),0),Y=e=>{let o=y.domElement.getBoundingClientRect();X.x=(e.clientX-o.left)/o.width*2-1,X.y=-((e.clientY-o.top)/o.height*2)+1,H.setFromCamera(X,d);let a=new r.Vector3;H.ray.intersectPlane(T,a),t.current.copy(a)},I=()=>{t.current.set(999,999,0)},Z=e=>{if(a&&a.geometry){let t=a.geometry.attributes.position.array,o=.48*w,i=.48*f;for(let a=0;a<3e3;a++){let n=3*a,r=.015*a,s=.012*a,l=.3+.2*Math.sin(.1*a),c=.2+.15*Math.cos(.1*a);t[n+1]+=.015*Math.sin(e*l+r),t[n]+=.01*Math.cos(e*c+s),t[n+2]+=.005*Math.sin(.2*e+.02*a),Math.abs(t[n])>o&&(t[n]=Math.sign(t[n])*(o-3*Math.random())),Math.abs(t[n+1])>i&&(t[n+1]=Math.sign(t[n+1])*(i-3*Math.random())),Math.abs(t[n+2])>35&&(t[n+2]=Math.sign(t[n+2])*(35-3*Math.random()))}a.geometry.attributes.position.needsUpdate=!0}},q=()=>{let e=0,t=0,o=0,a=0;return L.forEach(i=>{let n=i.geometry.attributes.position.array;for(let i=0;i<n.length;i+=3)e+=n[i],t+=n[i+1],o+=n[i+2],a++}),a>0&&(e/=a,t/=a,o/=a),console.log("Calculated wave center point:",{centerX:e,centerY:t,centerZ:o}),D&&D.visible&&D.position.set(e,t,o),{centerX:e,centerY:t,centerZ:o}};setTimeout(()=>{q()},1e3);let G=()=>{let e=.001*Date.now();if(Math.floor(e)%5==0&&Math.floor(e)!==$&&(o(m,d,L,a,w,f,S),$=Math.floor(e)),L.forEach(o=>{let a=o.geometry.attributes.position.array,i=o.userData.originalPositions,n=o.userData.baseWaveHeight,r=o.userData.waveOffset,s=o.userData.speed,l=o.userData.baseFrequency,c=o.userData.waveType,m=e+o.userData.timeOffset,d=Math.sin(m*o.userData.fluctuationSpeed)*o.userData.amplitudeFluctuation,h=Math.cos(m*o.userData.fluctuationSpeed*.7)*o.userData.frequencyFluctuation,M=Math.max(n*(1+.6*d),o.userData.minWaveHeight),g=Math.max(l*(1+.15*h),o.userData.minFrequency);o.userData.waveHeight=M,o.userData.frequency=g*(u?1:.95);for(let n=0;n<a.length/3;n++){let l,m;let d=3*n,h=i[d],p=Math.abs(h/(S/2)),w=Math.cos(p*Math.PI*.5),v=Math.pow(p,3),y=1-.5*v,b=.2+.8*w*y,x=u?1:.85,C=g*x;switch(c){case 0:l=Math.sin(h*C+Math.PI/2+e*s)*M*b,m=.22*M*Math.sin(h*C*2.8+Math.PI/2+e*s*.7)*b;break;case 1:l=Math.sin(h*C+Math.PI/2+e*s)*M*b,m=.3*M*Math.sin(h*C*2+Math.PI/2+e*s*1.3)*b;break;case 2:l=Math.sin(h*C+Math.PI/2+e*s)*M*b,m=.4*M*Math.sin(h*C*1.5+Math.PI/2+e*s*.5)*b;break;default:l=Math.sin(h*g+e*s)*M*b,m=0}let P=r+l+m,E=o.userData.initialDistances[n],D=o.userData.initialAngles[n],z=P+Math.sin(D)*E,F=Math.cos(D)*E,R=a[d+1],B=a[d+2],k=z-R,L=F-B,V=Math.sqrt(k*k+L*L),W=Math.min(1,.15*V),H=R+k*W*.12,X=B+L*W*.12,T=7/A*(u?.85:.7),Y=10*(u?.85:1);if(999!==t.current.x){let e=h-t.current.x,o=H-t.current.y,a=Math.sqrt(e*e+o*o);if(a<T){let t=Math.atan2(o,e),i=(1-a/T)*Y,n=Math.pow(1-a/T,2);H+=Math.sin(t)*i*n*(.5+.5*Math.random()),X+=(Math.random()-.5)*i*n*2}}let I=.5*f;Math.abs(H)>I&&(H=Math.sign(H)*(I-1-2*Math.random())),Math.abs(X)>40&&(X=Math.sign(X)*(39-2*Math.random())),a[d+1]=H,a[d+2]=X}o.geometry.attributes.position.needsUpdate=!0}),Z(e),Math.floor(60*e)%10==0){let t=!1;L.forEach(e=>{z(e,w,f)&&(t=!0)}),a&&z(a,1.1*w,1.1*f)&&(t=!0),t&&.1>Math.random()&&console.log(`[${e.toFixed(2)}] Particles constrained to stay within bounds`)}x.render(),requestAnimationFrame(G)},$=0,O=()=>{if(!e.current)return;let t=e.current.clientWidth,i=e.current.clientHeight;if(0===t||0===i)return;console.log("Window resize detected:",{newWidth:t,newHeight:i}),d.aspect=t/i,d.updateProjectionMatrix();let n=t/i,s=d.fov*Math.PI/180,l=2*Math.tan(s/2)*80,c=l*d.aspect*1;console.log("Resize: new calculated dimensions:",{newVisibleWidthAtZDepth:c,newVisibleHeightAtZDepth:l,newAspectRatio:n,newIsLandscape:n>1,viewportCorrectionFactor:1,previousVisibleWidthAtZDepth:w,previousVisibleHeightAtZDepth:f}),m.children.forEach(e=>{e.isMesh&&["leftMarker","rightMarker","originMarker"].includes(e.name)&&m.remove(e),e.isLine&&"centerLine"===e.name&&m.remove(e)});let h=new r.SphereGeometry(.5,8,8),u=new r.Mesh(h,new r.MeshBasicMaterial({color:16711680}));u.position.set(-c/2,0,0),u.name="leftMarker",u.visible=!1,m.add(u);let g=new r.Mesh(h,new r.MeshBasicMaterial({color:65280}));g.position.set(c/2,0,0),g.name="rightMarker",g.visible=!1,m.add(g);let p=new r.Mesh(h,new r.MeshBasicMaterial({color:255}));p.position.set(0,0,0),p.name="originMarker",p.visible=!1,m.add(p);let v=new r.LineBasicMaterial({color:16776960}),b=[];b.push(new r.Vector3(-c/2,0,0)),b.push(new r.Vector3(c/2,0,0));let C=new r.BufferGeometry().setFromPoints(b),P=new r.Line(C,v);P.name="centerLine",P.visible=!1,m.add(P),console.log("Resize: updated viewport boundary markers:",{leftEdge:-c/2,rightEdge:c/2,center:0}),d.position.set(0,0,80),d.lookAt(0,0,0),console.log("Resize: camera position maintained:",{position:d.position.toArray(),lookAt:[0,0,0]}),M.position.set(0,0,0),console.log("Resize: maintained centered scene position:",{sceneContainerPosition:M.position.toArray()});let A=.85*c;console.log("Resize: new width calculation:",{newScreenWidthFactor:.85,newCalculatedWidth:A}),L.forEach((e,t)=>{let o=e.geometry.attributes.position.array,a=e.userData.originalPositions;for(let e=0;e<o.length/3;e++){let t=3*e,i=a[t]/(S/2),n=c/2*i*1;o[t]=n,a[t]=n}e.geometry.attributes.position.needsUpdate=!0,console.log(`Resize: Updated wave ${t} particle positions for new dimensions`)});let D=0;L.forEach(e=>{z(e,.9*c,.9*l)&&D++}),a&&z(a,1.05*c,1.05*l)&&D++,console.log(`Resize: Constrained particles after resize: ${D} systems affected`),E.position.set(0,0,0),y.setSize(t,i,!1),x.setSize(t,i),setTimeout(()=>{o(m,d,L,a,c,l,A),console.log("Verifying centering after resize:"),q()},500)},_=requestAnimationFrame(G);return window.addEventListener("resize",O),y.domElement.addEventListener("mousemove",Y),y.domElement.addEventListener("mouseleave",I),()=>{window.removeEventListener("resize",O),y.domElement&&(y.domElement.removeEventListener("mousemove",Y),y.domElement.removeEventListener("mouseleave",I)),e.current&&y.domElement&&e.current.removeChild(y.domElement),cancelAnimationFrame(_),L.forEach(e=>{e.geometry&&e.geometry.dispose(),e.material&&(e.material.uniforms&&e.material.uniforms.pointTexture&&e.material.uniforms.pointTexture.value.dispose(),e.material.dispose())}),a&&(a.geometry&&a.geometry.dispose(),a.material&&(a.material.uniforms&&a.material.uniforms.pointTexture&&a.material.uniforms.pointTexture.value.dispose(),a.material.dispose())),x.dispose(),y.dispose()}},[]),i.jsx("div",{className:"wave-particles-container",style:{width:"100%",height:"100%",position:"relative",overflow:"hidden"},children:i.jsx("div",{ref:e,style:{width:"100%",height:"100%",position:"absolute"}})})};a()}catch(e){a(e)}})}};