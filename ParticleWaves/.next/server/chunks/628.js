"use strict";exports.id=628,exports.ids=[628],exports.modules={9628:(e,t,o)=>{o.a(e,async(e,a)=>{try{o.r(t),o.d(t,{default:()=>m});var r=o(997),i=o(6689),n=o(2949),l=o(2331),s=o(6757),c=o(9393),d=e([n,l,s,c]);[n,l,s,c]=d.then?(await d)():d;let m=({theme:e="dark"})=>{let t=(0,i.useRef)(null),o=(0,i.useRef)(new n.Vector3(999,999,0)),a=(0,i.useRef)(e),d=(e,o,a,r,i,n,l)=>{console.log("--- POSITION DEBUGGING ---"),console.log("Viewport Dimensions:",{clientWidth:t.current?.clientWidth,clientHeight:t.current?.clientHeight,aspect:o.aspect,visibleWidthAtZDepth:i,visibleHeightAtZDepth:n,calculatedWidth:l}),console.log("Camera Settings:",{position:o.position.toArray(),fov:o.fov,near:o.near,far:o.far});let s=1/0,c=-1/0,d=1/0,m=-1/0,h=1/0,g=-1/0;if(a.forEach((e,t)=>{let o=e.geometry.attributes.position.array;for(let e=0;e<o.length;e+=3)s=Math.min(s,o[e]),c=Math.max(c,o[e]),d=Math.min(d,o[e+1]),m=Math.max(m,o[e+1]),h=Math.min(h,o[e+2]),g=Math.max(g,o[e+2]);console.log(`Wave ${t} Position Range:`,{x:[s,c],y:[d,m],z:[h,g]})}),console.log("Overall Wave Particles Range:",{x:[s,c],y:[d,m],z:[h,g]}),r&&r.geometry){let e=r.geometry.attributes.position.array,t=1/0,o=-1/0,a=1/0,i=-1/0,n=1/0,l=-1/0;for(let r=0;r<e.length;r+=3)t=Math.min(t,e[r]),o=Math.max(o,e[r]),a=Math.min(a,e[r+1]),i=Math.max(i,e[r+1]),n=Math.min(n,e[r+2]),l=Math.max(l,e[r+2]);console.log("Background Particles Range:",{x:[t,o],y:[a,i],z:[n,l]})}console.log("Scene Hierarchy:",{scenePosition:e.position.toArray(),sceneRotation:e.rotation.toArray(),sceneScale:e.scale.toArray(),childCount:e.children.length}),e.children.forEach((e,t)=>{"Object3D"===e.type&&console.log(`Scene Container ${t}:`,{position:e.position.toArray(),rotation:e.rotation.toArray(),scale:e.scale.toArray(),childCount:e.children.length})})};return(0,i.useEffect)(()=>{let r,i,m,h;if(!t.current)return;console.log("Initializing ThemedParticles with theme:",e),console.log("DEBUG: WebGL Renderer Parameters:",{alpha:!0,premultipliedAlpha:!1,antialias:!0,theme:e,pixelRatio:Math.min(window.devicePixelRatio,2)}),a.current=e;let g=t.current.clientWidth,p=t.current.clientHeight;if(0===g||0===p){console.warn("Container has zero width or height. Delaying initialization.");let e=new ResizeObserver(o=>{let{width:a,height:r}=o[0].contentRect;a>0&&r>0&&(e.disconnect(),t.current.dataset.ready="true")});e.observe(t.current);return}console.log("Initializing with container dimensions:",{width:g,height:p});let u=new n.Scene;"light"===e?(u.background=new n.Color(16777215),u.environment=null,u.fog=null,console.log("DEBUG: Using light mode specific scene settings")):(u.background=new n.Color(17),u.fog=null,console.log("DEBUG: Using dark mode specific scene settings"));let M=new n.PerspectiveCamera(60,g/p,.1,1e3),f=g/p,w=f>1;M.position.set(0,0,80),M.lookAt(0,0,0),console.log("Camera position corrected:",{position:M.position.toArray(),lookAt:[0,0,0]});let v=new n.Object3D;v.position.set(0,0,0),u.add(v);let C=new n.GridHelper(100,10,4473924,2236962);C.position.set(0,0,0),C.visible=!1,u.add(C);let y=M.fov*Math.PI/180,b=2*Math.tan(y/2)*80,x=b*M.aspect*1;console.log("Calculated visible dimensions:",{visibleWidthAtZDepth:x,visibleHeightAtZDepth:b,aspectRatio:f,isLandscape:w,viewportCorrectionFactor:1}),v.position.set(0,0,0),console.log("Corrected scene container position:",{globalCenterOffsetX:0,sceneContainerPosition:v.position.toArray()});let S=(w?b:x)*1;console.log("Viewport correction factors:",{viewportCorrectionFactor:1,baseSize:S});let P=new n.WebGLRenderer({antialias:!0,alpha:"light"===e,premultipliedAlpha:!1,preserveDrawingBuffer:"light"===e,powerPreference:"high-performance"}),A=Math.min(window.devicePixelRatio,2);P.setPixelRatio(A),P.autoClear=!0,P.setClearColor("light"===e?16777215:17,1),P.sortObjects=!0,"light"===e?(P.outputColorSpace=n.SRGBColorSpace,P.toneMapping=n.NoToneMapping,console.log("DEBUG: Using light mode specific renderer settings")):(P.outputColorSpace=n.LinearSRGBColorSpace,P.toneMapping=n.ACESFilmicToneMapping,console.log("DEBUG: Using dark mode specific renderer settings")),P.setSize(g,p,!1),P.domElement.style.position="absolute",P.domElement.style.left="0",P.domElement.style.top="0",P.domElement.style.width="100%",P.domElement.style.height="100%",t.current.appendChild(P.domElement),console.log(`DEBUG: Initial renderer settings for ${e} mode:`,{autoClear:P.autoClear,clearColor:P.getClearColor(new n.Color).getHexString(),alpha:P.domElement.style.backgroundColor?"set":"not set",sortObjects:P.sortObjects,premultipliedAlpha:"premultiplied"===P.domElement.style.backgroundColor}),P.setClearColor("light"===e?16777215:17,1),P.clear(!0,!0,!0),console.log(`DEBUG: After initial clear for ${e} mode`);let D=new l.EffectComposer(P);if(D.setPixelRatio(A),D.setSize(g,p),"light"===e){console.log("DEBUG: Setting up light mode post-processing");let e=new s.RenderPass(u,M);e.clearColor=new n.Color(16777215),e.clearAlpha=1,D.addPass(e);let t=new c.UnrealBloomPass(new n.Vector2(g,p),.6,.4,.9);t.renderToScreen=!1,D.addPass(t)}else{console.log("DEBUG: Setting up dark mode post-processing");let e=new s.RenderPass(u,M);e.clearColor=new n.Color(17),e.clearAlpha=1,D.addPass(e);let t=new c.UnrealBloomPass(new n.Vector2(g,p),.8,.3,.8);t.renderToScreen=!0,D.addPass(t)}if(0===P.domElement.width||0===P.domElement.height){console.warn("Canvas has zero dimensions, cannot initialize composer");return}let E=w?.65:.75;console.log("Wave scale factor:",E);let B=.85*x;console.log("Wave width calculation:",{screenWidthFactor:.85,calculatedWidth:B,visibleWidthAtZDepth:x});let R=new n.Object3D;R.position.set(0,0,0),v.add(R);let F=new n.Mesh(new n.SphereGeometry(.5,8,8),new n.MeshBasicMaterial({color:16711680}));F.visible=!1,R.add(F),(()=>{let e=new n.SphereGeometry(.5,8,8),t=new n.Mesh(e,new n.MeshBasicMaterial({color:16711680}));t.position.set(-x/2,0,0),t.name="leftMarker",t.visible=!1,u.add(t);let o=new n.Mesh(e,new n.MeshBasicMaterial({color:65280}));o.position.set(x/2,0,0),o.name="rightMarker",o.visible=!1,u.add(o);let a=new n.Mesh(e,new n.MeshBasicMaterial({color:255}));a.position.set(0,0,0),a.name="originMarker",a.visible=!1,u.add(a);let r=new n.LineBasicMaterial({color:16776960}),i=[];i.push(new n.Vector3(-x/2,0,0)),i.push(new n.Vector3(x/2,0,0));let l=new n.BufferGeometry().setFromPoints(i),s=new n.Line(l,r);s.name="centerLine",s.visible=!1,u.add(s),console.log("Viewport boundary markers added:",{leftEdge:-x/2,rightEdge:x/2,center:0,visibleWidthAtZDepth:x})})();let z=(e,t,o)=>{if(!e||!e.geometry)return!1;let a=e.geometry.attributes.position.array,r=!1,i=.48*t,n=.48*o;for(let e=0;e<a.length;e+=3)Math.abs(a[e])>i&&(a[e]=Math.sign(a[e])*(i-2-3*Math.random()),r=!0),Math.abs(a[e+1])>n&&(a[e+1]=Math.sign(a[e+1])*(n-2-3*Math.random()),r=!0),Math.abs(a[e+2])>40&&(a[e+2]=Math.sign(a[e+2])*(38-3*Math.random()),r=!0);return r&&(e.geometry.attributes.position.needsUpdate=!0),r};"light"===e?(new n.Color(16777215),new n.Color(14281215),new n.Color(10734079),new n.Color(5084415),new n.Color(26367),new n.Color(18380),new n.Color(13184)):(new n.Color(16777215),new n.Color(10934527),new n.Color(5084415),new n.Color(18347),new n.Color(16738740),new n.Color(16716947),new n.Color(16711935)),"light"===e?(r=new n.Color(13184),i=new n.Color(15792383),m=new n.Color(5084415)):(r=new n.Color(16711935),i=new n.Color(15790335),m=new n.Color(18347));let k=(e,t,o)=>{let a=new n.Color;return a.r=e.r+(t.r-e.r)*o,a.g=e.g+(t.g-e.g)*o,a.b=e.b+(t.b-e.b)*o,a},T=[],G={minX:1/0,maxX:-1/0,minY:1/0,maxY:-1/0,minZ:1/0,maxZ:-1/0};for(let t=0;t<5;t++){let o=new n.BufferGeometry,a=new Float32Array(12e3),l=new Float32Array(12e3),s=new Float32Array(12e3),c=new Float32Array(4e3),d=5+2.5*t,h=Math.sqrt(16800),g=t%3;console.log(`Creating Wave ${t}:`,{waveHeight:d,waveType:g,gridWidth:h,particleCount:4e3});for(let e=0;e<4e3;e++){let o;let n=e%h/h*2-1;n=Math.sign(n)*Math.pow(Math.abs(n),1.15);let d=x/2*n*1,g=Math.random()*Math.PI*2,p=Math.pow(Math.abs(n),2),u=(w?.65:.55)*(1-.3*p),M=2*Math.pow(Math.random(),3)*u+.3*t,f=Math.sin(g)*M,v=Math.cos(g)*M,C=0+f;a[3*e]=d,a[3*e+1]=C,a[3*e+2]=v,G.minX=Math.min(G.minX,d),G.maxX=Math.max(G.maxX,d),G.minY=Math.min(G.minY,C),G.maxY=Math.max(G.maxY,C),G.minZ=Math.min(G.minZ,v),G.maxZ=Math.max(G.maxZ,v),e%1e3==0&&console.log(`Wave ${t} Particle ${e} Position:`,{screenPosition:n,calculatedWidth:B,scaleFactor:1,x:d,y:C,z:v,radiusMultiplier:u,distance:M}),s[3*e]=d,s[3*e+1]=C,s[3*e+2]=v;let y=(d/(B/2)+1)/2;if(y<.45){let e=y/.45,t=Math.pow(e,1);if(o=k(r,i,t),.3>Math.random()){let e=.12*Math.random();o.offsetHSL(0,0,e-.06)}}else if(y>.55){let e=(y-.55)/.45,t=Math.pow(e,1);if(o=k(i,m,t),.3>Math.random()){let e=.12*Math.random();o.offsetHSL(0,0,e-.06)}}else{let e=(y-.45)/.1;if(o=k(i,i,e),.5>Math.random()){let e=.15*Math.random();y<.5?o.offsetHSL(-.05,.1,e-.08):o.offsetHSL(.05,.1,e-.08)}}l[3*e]=o.r,l[3*e+1]=o.g,l[3*e+2]=o.b,c[e]=.4+.7*Math.random()}console.log(`Wave ${t} Position Summary:`,{xRange:[G.minX,G.maxX],yRange:[G.minY,G.maxY],zRange:[G.minZ,G.maxZ],visibleWidthAtZDepth:x,calculatedWidth:B}),o.setAttribute("position",new n.BufferAttribute(a,3)),o.setAttribute("customColor",new n.BufferAttribute(l,3)),o.setAttribute("size",new n.BufferAttribute(c,1));let p=new n.ShaderMaterial({uniforms:{pointTexture:{value:L()}},vertexShader:`
          attribute float size;
          attribute vec3 customColor;
          varying vec3 vColor;
          
          void main() {
            vColor = customColor;
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = size * (300.0 / -mvPosition.z);
            gl_Position = projectionMatrix * mvPosition;
          }
        `,fragmentShader:"light"===e?`
            uniform sampler2D pointTexture;
            varying vec3 vColor;
            
            void main() {
              vec4 texColor = texture2D(pointTexture, gl_PointCoord);
              if (texColor.a < 0.1) discard;
              gl_FragColor = vec4(vColor, 1.0) * texColor;
            }
          `:`
            uniform sampler2D pointTexture;
            varying vec3 vColor;
            
            void main() {
              gl_FragColor = vec4(vColor, 1.0) * texture2D(pointTexture, gl_PointCoord);
              if (gl_FragColor.a < 0.1) discard;
            }
          `,blending:"light"===e?n.NormalBlending:n.AdditiveBlending,depthTest:!1,transparent:!0,opacity:1,vertexColors:!0,depthWrite:!1,alphaTest:"light"===e?.1:.01}),u=new n.Points(o,p);u.userData={originalPositions:s,waveOffset:0,waveHeight:d,baseWaveHeight:d,minWaveHeight:.6*d,speed:.5+.5*Math.random(),frequency:.02+.02*Math.random(),baseFrequency:.02+.02*Math.random(),minFrequency:.015,amplitudeFluctuation:.2+.6*Math.random(),frequencyFluctuation:.3+.3*Math.random(),fluctuationSpeed:.15+.25*Math.random(),timeOffset:Math.random()*Math.PI*2,waveType:g,initialDistances:new Float32Array(4e3),initialAngles:new Float32Array(4e3)};for(let e=0;e<4e3;e++){let o=Math.random()*Math.PI*2,a=1.6*Math.pow(Math.random(),3)+.25*t;u.userData.initialDistances[e]=a,u.userData.initialAngles[e]=o}R.add(u),T.push(u)}console.log("All Wave Particles Position Range:",G),console.log("Comparison to viewport:",{xRangeVsVisibleWidth:[G.minX/(x/2),G.maxX/(x/2)],yRangeVsVisibleHeight:[G.minY/(b/2),G.maxY/(b/2)]}),console.log("Applying initial constraints to wave particles..."),T.forEach((e,t)=>{let o=z(e,x,b);console.log(`Wave ${t} initial constraint applied: ${o}`)}),R.position.set(0,0,0);{let t=new n.BufferGeometry,o=new Float32Array(9e3),a=new Float32Array(9e3),l=new Float32Array(3e3),s={minX:1/0,maxX:-1/0,minY:1/0,maxY:-1/0,minZ:1/0,maxZ:-1/0};console.log("Creating background particles:",{count:3e3,visibleWidthAtZDepth:x,visibleHeightAtZDepth:b});for(let e=0;e<3e3;e++){let t;let n=w?.9:.8,c=2*Math.random()-1;.15>Math.random()&&(c=(.5>Math.random()?-1:1)*(.85+.15*Math.random()));let d=x/2*c*n*1,h=b/2*(2*Math.random()-1)*n,g=(2*Math.random()-1)*35;o[3*e]=d,o[3*e+1]=h,o[3*e+2]=g,s.minX=Math.min(s.minX,d),s.maxX=Math.max(s.maxX,d),s.minY=Math.min(s.minY,h),s.maxY=Math.max(s.maxY,h),s.minZ=Math.min(s.minZ,g),s.maxZ=Math.max(s.maxZ,g),e%1e3==0&&console.log(`Background Particle ${e} Position:`,{x:d,y:h,z:g,spreadFactor:n,bgScaleFactor:1,calculatedWidth:B,visibleHeightAtZDepth:b}),l[e]=.05>Math.random()?.8+1.2*Math.random():.1+.4*Math.random();let p=(d/(B/2*n)+1)/2;if(p<.45){let e=p/.45,o=Math.pow(e,1.1);if(t=k(r,i,o),.3>Math.random()){let e=.15*Math.random();t.offsetHSL(0,0,e-.07)}}else if(p>.55){let e=(p-.55)/.45,o=Math.pow(e,1.1);if(t=k(i,m,o),.3>Math.random()){let e=.15*Math.random();t.offsetHSL(0,0,e-.07)}}else{let e=(p-.45)/.1;if(t=k(i,i,e),.5>Math.random()){let e=.15*Math.random();p<.5?t.offsetHSL(-.05,.1,e-.08):t.offsetHSL(.05,.1,e-.08)}}.1>Math.random()&&(.5>Math.random()?t.offsetHSL(0,0,.1):t.offsetHSL(0,0,-.15)),a[3*e]=t.r,a[3*e+1]=t.g,a[3*e+2]=t.b}console.log("Background Particles Position Summary:",s),console.log("Background vs Viewport Comparison:",{xRangeVsVisibleWidth:[s.minX/(x/2),s.maxX/(x/2)],yRangeVsVisibleHeight:[s.minY/(b/2),s.maxY/(b/2)]}),t.setAttribute("position",new n.BufferAttribute(o,3)),t.setAttribute("customColor",new n.BufferAttribute(a,3)),t.setAttribute("size",new n.BufferAttribute(l,1));let c=new n.ShaderMaterial({uniforms:{pointTexture:{value:L()}},vertexShader:`
          attribute float size;
          attribute vec3 customColor;
          varying vec3 vColor;
          
          void main() {
            vColor = customColor;
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            gl_PointSize = size * (300.0 / -mvPosition.z);
            gl_Position = projectionMatrix * mvPosition;
          }
        `,fragmentShader:"light"===e?`
            uniform sampler2D pointTexture;
            varying vec3 vColor;
            
            void main() {
              vec4 texColor = texture2D(pointTexture, gl_PointCoord);
              if (texColor.a < 0.1) discard;
              gl_FragColor = vec4(vColor, 1.0) * texColor;
            }
          `:`
            uniform sampler2D pointTexture;
            varying vec3 vColor;
            
            void main() {
              gl_FragColor = vec4(vColor, 1.0) * texture2D(pointTexture, gl_PointCoord);
              if (gl_FragColor.a < 0.1) discard;
            }
          `,blending:"light"===e?n.NormalBlending:n.AdditiveBlending,depthTest:!1,transparent:!0,opacity:1,vertexColors:!0,depthWrite:!1,alphaTest:"light"===e?.1:.01});h=new n.Points(t,c),u.add(h)}if(console.log("Applying initial constraints to background particles..."),h){let e=z(h,1.2*x,1.2*b);console.log(`Background particles initial constraint applied: ${e}`)}function L(){let t=document.createElement("canvas");t.width=64,t.height=64;let o=t.getContext("2d");if(!o)return console.error("Could not get 2D context for particle texture"),new n.Texture;o.clearRect(0,0,64,64);let a=o.createRadialGradient(32,32,0,32,32,32);"light"===e?(a.addColorStop(0,"rgba(10, 80, 255, 1.0)"),a.addColorStop(.1,"rgba(20, 100, 255, 0.95)"),a.addColorStop(.25,"rgba(40, 120, 255, 0.9)"),a.addColorStop(.5,"rgba(60, 140, 255, 0.8)"),a.addColorStop(.75,"rgba(80, 160, 255, 0.6)"),a.addColorStop(1,"rgba(100, 180, 255, 0)")):(a.addColorStop(0,"rgba(255, 255, 255, 1)"),a.addColorStop(.1,"rgba(255, 255, 255, 0.95)"),a.addColorStop(.25,"rgba(240, 250, 255, 0.9)"),a.addColorStop(.5,"rgba(200, 230, 255, 0.6)"),a.addColorStop(.75,"rgba(150, 200, 255, 0.3)"),a.addColorStop(1,"rgba(100, 150, 255, 0)")),o.fillStyle=a,o.fillRect(0,0,64,64);let r=new n.Texture(t);return r.needsUpdate=!0,r.premultiplyAlpha=!1,r}let W=new n.Raycaster,V=new n.Vector2,U=new n.Plane(new n.Vector3(0,0,1),0),H=e=>{let t=P.domElement.getBoundingClientRect();V.x=(e.clientX-t.left)/t.width*2-1,V.y=-((e.clientY-t.top)/t.height*2)+1,W.setFromCamera(V,M);let a=new n.Vector3;W.ray.intersectPlane(U,a),o.current.copy(a)},X=()=>{o.current.set(999,999,0)},I=e=>{if(h&&h.geometry){let t=h.geometry.attributes.position.array,o=.48*x,a=.48*b;for(let r=0;r<3e3;r++){let i=3*r,n=.015*r,l=.012*r,s=.3+.2*Math.sin(.1*r),c=.2+.15*Math.cos(.1*r);t[i+1]+=.015*Math.sin(e*s+n),t[i]+=.01*Math.cos(e*c+l),t[i+2]+=.005*Math.sin(.2*e+.02*r),Math.abs(t[i])>o&&(t[i]=Math.sign(t[i])*(o-3*Math.random())),Math.abs(t[i+1])>a&&(t[i+1]=Math.sign(t[i+1])*(a-3*Math.random())),Math.abs(t[i+2])>35&&(t[i+2]=Math.sign(t[i+2])*(35-3*Math.random()))}h.geometry.attributes.position.needsUpdate=!0}},Y=()=>{let e=0,t=0,o=0,a=0;return T.forEach(r=>{let i=r.geometry.attributes.position.array;for(let r=0;r<i.length;r+=3)e+=i[r],t+=i[r+1],o+=i[r+2],a++}),a>0&&(e/=a,t/=a,o/=a),console.log("Calculated wave center point:",{centerX:e,centerY:t,centerZ:o}),F&&F.visible&&F.position.set(e,t,o),{centerX:e,centerY:t,centerZ:o}};setTimeout(()=>{Y()},1e3);let $=()=>{let t=.001*Date.now(),a=Math.floor(t)%10==0&&Math.floor(t)!==Z;if(Math.floor(t)%5==0&&Math.floor(t)!==Z&&(d(u,M,T,h,x,b,B),Z=Math.floor(t)),T.forEach(e=>{let a=e.geometry.attributes.position.array,r=e.userData.originalPositions,i=e.userData.baseWaveHeight,n=e.userData.waveOffset,l=e.userData.speed,s=e.userData.baseFrequency,c=e.userData.waveType,d=t+e.userData.timeOffset,m=Math.sin(d*e.userData.fluctuationSpeed)*e.userData.amplitudeFluctuation,h=Math.cos(d*e.userData.fluctuationSpeed*.7)*e.userData.frequencyFluctuation,g=Math.max(i*(1+.6*m),e.userData.minWaveHeight),p=Math.max(s*(1+.15*h),e.userData.minFrequency);e.userData.waveHeight=g,e.userData.frequency=p*(w?1:.95);for(let i=0;i<a.length/3;i++){let s,d;let m=3*i,h=r[m],u=Math.abs(h/(B/2)),M=Math.cos(u*Math.PI*.5),f=Math.pow(u,3),v=1-.5*f,C=.2+.8*M*v,y=w?1:.85,x=p*y;switch(c){case 0:s=Math.sin(h*x+Math.PI/2+t*l)*g*C,d=.22*g*Math.sin(h*x*2.8+Math.PI/2+t*l*.7)*C;break;case 1:s=Math.sin(h*x+Math.PI/2+t*l)*g*C,d=.3*g*Math.sin(h*x*2+Math.PI/2+t*l*1.3)*C;break;case 2:s=Math.sin(h*x+Math.PI/2+t*l)*g*C,d=.4*g*Math.sin(h*x*1.5+Math.PI/2+t*l*.5)*C;break;default:s=Math.sin(h*p+t*l)*g*C,d=0}let S=n+s+d,P=e.userData.initialDistances[i],A=e.userData.initialAngles[i],D=S+Math.sin(A)*P,R=Math.cos(A)*P,F=a[m+1],z=a[m+2],k=D-F,T=R-z,G=Math.sqrt(k*k+T*T),L=Math.min(1,.15*G),W=F+k*L*.12,V=z+T*L*.12,U=7/E*(w?.85:.7),H=10*(w?.85:1);if(999!==o.current.x){let e=h-o.current.x,t=W-o.current.y,a=Math.sqrt(e*e+t*t);if(a<U){let o=Math.atan2(t,e),r=(1-a/U)*H,i=Math.pow(1-a/U,2);W+=Math.sin(o)*r*i*(.5+.5*Math.random()),V+=(Math.random()-.5)*r*i*2}}let X=.5*b;Math.abs(W)>X&&(W=Math.sign(W)*(X-1-2*Math.random())),Math.abs(V)>40&&(V=Math.sign(V)*(39-2*Math.random())),a[m+1]=W,a[m+2]=V}e.geometry.attributes.position.needsUpdate=!0}),I(t),Math.floor(60*t)%10==0){let e=!1;T.forEach(t=>{z(t,x,b)&&(e=!0)}),h&&z(h,1.1*x,1.1*b)&&(e=!0),e&&.1>Math.random()&&console.log(`[${t.toFixed(2)}] Particles constrained to stay within bounds`)}"light"===e?(a&&console.log(`DEBUG: Light mode direct rendering at time ${t.toFixed(2)}`),P.setClearColor(16777215,1),P.clear(!0,!0,!0),P.render(u,M)):(a&&console.log(`DEBUG: Dark mode post-processed rendering at time ${t.toFixed(2)}`),D.render()),requestAnimationFrame($)},Z=0,O=()=>{if(!t.current)return;let o=t.current.clientWidth,a=t.current.clientHeight;if(0===o||0===a)return;console.log("Window resize detected:",{newWidth:o,newHeight:a}),M.aspect=o/a,M.updateProjectionMatrix();let r=o/a,i=M.fov*Math.PI/180,l=2*Math.tan(i/2)*80,c=l*M.aspect*1;console.log("Resize: new calculated dimensions:",{newVisibleWidthAtZDepth:c,newVisibleHeightAtZDepth:l,newAspectRatio:r,newIsLandscape:r>1,viewportCorrectionFactor:1,previousVisibleWidthAtZDepth:x,previousVisibleHeightAtZDepth:b}),u.children.forEach(e=>{e.isMesh&&["leftMarker","rightMarker","originMarker"].includes(e.name)&&u.remove(e),e.isLine&&"centerLine"===e.name&&u.remove(e)});let m=new n.SphereGeometry(.5,8,8),g=new n.Mesh(m,new n.MeshBasicMaterial({color:16711680}));g.position.set(-c/2,0,0),g.name="leftMarker",g.visible=!1,u.add(g);let p=new n.Mesh(m,new n.MeshBasicMaterial({color:65280}));p.position.set(c/2,0,0),p.name="rightMarker",p.visible=!1,u.add(p);let f=new n.Mesh(m,new n.MeshBasicMaterial({color:255}));f.position.set(0,0,0),f.name="originMarker",f.visible=!1,u.add(f);let w=new n.LineBasicMaterial({color:16776960}),C=[];C.push(new n.Vector3(-c/2,0,0)),C.push(new n.Vector3(c/2,0,0));let y=new n.BufferGeometry().setFromPoints(C),S=new n.Line(y,w);S.name="centerLine",S.visible=!1,u.add(S),console.log("Resize: updated viewport boundary markers:",{leftEdge:-c/2,rightEdge:c/2,center:0}),M.position.set(0,0,80),M.lookAt(0,0,0),console.log("Resize: camera position maintained:",{position:M.position.toArray(),lookAt:[0,0,0]}),v.position.set(0,0,0),console.log("Resize: maintained centered scene position:",{sceneContainerPosition:v.position.toArray()});let A=.85*c;console.log("Resize: new width calculation:",{newScreenWidthFactor:.85,newCalculatedWidth:A}),T.forEach((e,t)=>{let o=e.geometry.attributes.position.array,a=e.userData.originalPositions;for(let e=0;e<o.length/3;e++){let t=3*e,r=a[t]/(B/2),i=c/2*r*1;o[t]=i,a[t]=i}e.geometry.attributes.position.needsUpdate=!0,console.log(`Resize: Updated wave ${t} particle positions for new dimensions`)});let E=0;T.forEach(e=>{z(e,.9*c,.9*l)&&E++}),h&&z(h,1.05*c,1.05*l)&&E++,console.log(`Resize: Constrained particles after resize: ${E} systems affected`),R.position.set(0,0,0),P.setSize(o,a,!1),D.setSize(o,a),P.setClearColor("light"===e?16777215:17,1),"light"===e?(console.log("DEBUG: Reapplying light mode renderer settings after resize"),P.outputColorSpace=n.SRGBColorSpace,P.toneMapping=n.NoToneMapping):(console.log("DEBUG: Reapplying dark mode renderer settings after resize"),P.outputColorSpace=n.LinearSRGBColorSpace,P.toneMapping=n.ACESFilmicToneMapping),D.passes.forEach(t=>{t instanceof s.RenderPass&&(t.clearColor=new n.Color("light"===e?16777215:17),t.clearAlpha=1)}),setTimeout(()=>{d(u,M,T,h,c,l,A),console.log("Verifying centering after resize:"),Y()},500)},_=requestAnimationFrame($);return window.addEventListener("resize",O),P.domElement.addEventListener("mousemove",H),P.domElement.addEventListener("mouseleave",X),()=>{console.log("Cleaning up Three.js resources..."),console.log(`Current theme at cleanup: ${a.current}`),cancelAnimationFrame(_),t.current?.removeEventListener("mousemove",H),t.current?.removeEventListener("mouseleave",X),window.removeEventListener("resize",O),t.current&&P.domElement&&t.current.removeChild(P.domElement),T.forEach(e=>{e.geometry&&e.geometry.dispose(),e.material&&(e.material.uniforms&&e.material.uniforms.pointTexture&&e.material.uniforms.pointTexture.value.dispose(),e.material.dispose())}),h&&(h.geometry&&h.geometry.dispose(),h.material&&(h.material.uniforms&&h.material.uniforms.pointTexture&&h.material.uniforms.pointTexture.value.dispose(),h.material.dispose())),D.dispose(),P.dispose()}},[e]),r.jsx("div",{className:"wave-particles-container",style:{width:"100%",height:"100%",position:"relative",overflow:"hidden"},children:r.jsx("div",{ref:t,style:{width:"100%",height:"100%",position:"absolute"}})})};a()}catch(e){a(e)}})}};